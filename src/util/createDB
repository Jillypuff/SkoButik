drop database if exists SkoHandel;
create database SkoHandel;
use Skohandel;

create table Category (
	ID int not null auto_increment primary key,
	category varchar(256) not null
);

create table Shoe(
	ID int not null auto_increment primary key,
	name char(255) not null,
	size int not null,
	color char(40) not null,
	price int not null,
	make char(40) not null,
	stock int not null
);

create table ShoeCategory (
	shoeID int not null,
	categoryID int not null,
    primary key (shoeID, categoryID),
	foreign key(categoryID) references Category(ID),
    foreign key(shoeID) references Shoe(ID)
);

create table Users(
	ID int not null auto_increment primary key,
	firstName char(40) not null,
	surname char(40) not null,
	place varchar(255) not null,
    username char(40) not null unique,
    passwords char(40) not null
);

create table Orders(
	ID int not null auto_increment primary key,
	usersID int not null,
	dates timestamp default CURRENT_TIMESTAMP,
	totalCost int not null,
	status ENUM('Active', 'Payed') not null,
	foreign key(usersID) references Users(ID)
);

create table Content(
	ordersID int not null,
	shoeID int not null,
	amount int not null,
	foreign key(ordersID) references Orders(ID),
	foreign key(shoeID) references Shoe(ID)
);

use skohandel;

insert into Category (category)
VALUES
('Child'),
('Walking'),
('Sandal'),
('Running'),
('Sport');

insert into Shoe(name, size, color, price, make, stock)
VALUES
('Ecco4K', 40, 'Black', 349, 'Ecco', 3),
('Ecco4K', 41, 'Black', 349, 'Ecco', 3),
('Ecco4K', 42, 'Black', 349, 'Ecco', 2),
('Kobeer', 29, 'White', 329, 'Reebok', 1),
('Kobeer', 31, 'White', 329, 'Reebok', 1),
('Kobeer', 39, 'White', 329, 'Reebok', 2),
('Kobeer', 41, 'White', 329, 'Reebok', 3),
('Kobeer', 43, 'White', 329, 'Reebok', 2),
('Ceco', 40, 'White', 429, 'Ecco', 2),
('Ceco', 41, 'White', 429, 'Ecco', 2),
('Kine', 41, 'Gray', 399, 'Nike', 0),
('Kine', 42, 'Gray', 399, 'Nike', 3),
('Scorc', 29, 'Green', 99, 'Crocs', 1),
('Scorc', 31, 'Green', 99, 'Crocs', 1),
('Scorc', 39, 'Green', 99, 'Crocs', 3),
('Scorc', 41, 'Green', 99, 'Crocs', 2),
('NikeAir', 42, 'Orange', 599, 'Nike', 4),
('Ecco3K', 40, 'White', 299, 'Ecco', 3),
('RebAir', 41, 'Black', 199, 'Reebok', 2),
('Beacho', 38, 'Black', 299, 'Ecco', 3);

insert into ShoeCategory(shoeID, categoryID)
VALUES
(1, 2),
(2, 2),
(3, 2),
(4, 1),
(4, 2),
(5, 1),
(5, 2),
(6, 2),
(7, 2),
(8, 2),
(9, 4),
(10, 4),
(11, 4),
(11, 5),
(12, 4),
(12, 5),
(13, 1),
(13, 3),
(14, 1),
(14, 3),
(15, 3),
(16, 3),
(17, 5),
(18, 2),
(19, 2),
(20, 3);

insert into Users(firstName, surname, place, username, passwords)
VALUES
('Admin', 'Adminsson', 'Stockholm', 'admin', 'admin'),
('Bengt', 'Butiksansvarig', 'Göteborg', 'bengt1', 'qwerty'),
('Cecelia', 'Claesson', 'Falun', 'shobuyer43', 'password'),
('David', 'Dahl', 'Stockholm', 'username', 'password'),
('Emil', 'Ek', 'Göteborg', 'LöparEmil', 'gofast'),
('Fredrik', 'Fisk', 'Stockholm', 'anon', 'pFladjebb_trlk7mtn'),
('Gina', 'Gustavsson', 'Falun', 'GinaNdjuice', '1q2w3e'),
('Hendrik', 'Hendriksson', 'Stockholm', 'Henkan', 'n00bsl4y3r');

insert into Orders(usersID, totalCost, status)
VALUES
(1, 428, 'Payed'),
(4, 868, 'Payed'),
(3, 497, 'Payed'),
(1, 1047, 'Payed'),
(5, 1797, 'Payed'),
(2, 528, 'Payed'),
(8, 299, 'Payed');

insert into Content(ordersID, shoeID, amount)
VALUES
(1, 5, 1),
(1, 14, 1),
(2, 1, 1),
(2, 9, 1),
(3, 15, 2),
(3, 20, 1),
(4, 1, 1),
(4, 2, 1),
(4, 3, 1),
(5, 17, 3),
(6, 7, 1),
(6, 19, 1),
(7, 20, 1);

UPDATE Orders
SET dates = '2024-03-03 10:00:00'
WHERE ID = 1;

UPDATE Orders
SET dates = '2024-03-05 10:00:00'
WHERE ID = 2;

UPDATE Orders
SET dates = '2024-06-05 10:00:00'
WHERE ID = 3;

UPDATE Orders
SET dates = '2024-08-08 10:00:00'
WHERE ID = 4;

UPDATE Orders
SET dates = '2024-08-21 10:00:00'
WHERE ID = 5;

UPDATE Orders
SET dates = '2024-09-09 10:10:10'
WHERE ID = 6;

DELIMITER $$
CREATE PROCEDURE AttemptLogin(
	IN pUsername char(40),
    IN pPassword char(40),
    OUT pResult varchar(255)
)
BEGIN
	DECLARE vUsername char(40);
    DECLARE vPassword char(40);

    SELECT username, passwords INTO vUsername, vPassword
    FROM users
    WHERE username = pUsername;

    IF vUsername IS NULL THEN
		SET pResult = 'User not found';
	ELSE
		IF vPassword = pPassword THEN
			SET pResult = 'Login success';
		ELSE
			SET pResult = 'Wrong password';
		END IF;
	END IF;
END $$

CREATE PROCEDURE AddToCart(
	IN pUsersID int,
    IN pShoeID int,
    OUT pResult char(255)
)
BEGIN
	DECLARE vOrdersID int;

    IF (SELECT stock FROM shoe WHERE ID = pShoeID) < 1 THEN
		SET pResult = 'Out of stock';
	ELSE
		IF NOT EXISTS (SELECT * FROM orders WHERE usersID = pUsersID AND status='Active') THEN
			INSERT INTO orders(usersID, totalCost, status) VALUES(pUsersID, 0, 'Active');
		END IF;

		SELECT ID INTO vOrdersID FROM orders WHERE usersID = pUsersID AND status='Active';

		IF EXISTS (SELECT * FROM content WHERE shoeID = pShoeID AND ordersID = vOrdersID) THEN
			UPDATE CONTENT
			SET amount = amount + 1
			WHERE shoeID = pShoeID AND ordersID = vOrdersID;
		ELSE
			INSERT INTO content(ordersID, shoeID, amount) VALUES(vOrdersID, pShoeID, 1);
		END IF;

		UPDATE orders
		SET totalCost = (SELECT SUM(content.amount * shoe.price) FROM content
						JOIN shoe ON content.shoeID = shoe.ID
						WHERE content.ordersID = vOrdersID)
		WHERE ID = vOrdersID;

		UPDATE shoe
		SET shoe.stock = shoe.stock - 1
		WHERE ID = pShoeID;

        SET pResult = 'Success';
    END IF;
END $$

DELIMITER ;

CREATE OR REPLACE VIEW Inventory AS
SELECT ID, CONCAT(make, ' - ', name) as Name, size as Size, color as Color, price as Price
FROM shoe;